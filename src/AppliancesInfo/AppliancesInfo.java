/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AppliancesInfo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Aadesh
 */
public class AppliancesInfo extends javax.swing.JFrame {

    private String range;

    /**
     * Creates new form AppliancesInfo
     */
    public ArrayList<TableRows> list = new ArrayList();
    public AppliancesInfo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        range_BtnGrp = new javax.swing.ButtonGroup();
        jComboBox1 = new javax.swing.JComboBox<>();
        table_Panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        add_Btn = new javax.swing.JButton();
        clear_Btn = new javax.swing.JButton();
        delete_Btn = new javax.swing.JButton();
        id_TF = new javax.swing.JTextField();
        name_TF = new javax.swing.JTextField();
        price_TF = new javax.swing.JTextField();
        Mid_RangeBtn = new javax.swing.JRadioButton();
        High_rangeBtn = new javax.swing.JRadioButton();
        Budget_rangeBTN = new javax.swing.JRadioButton();
        category_CB = new javax.swing.JComboBox<>();
        exit_Btn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        type_CB = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        computerIS_Tbl = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        priceSrch_TF = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        priceSrch_Btn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        categorySearch_CB = new javax.swing.JComboBox<>();
        SortList_Btn = new javax.swing.JButton();
        totalCategorySrch_CB = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        totalDevice = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openFile = new javax.swing.JRadioButtonMenuItem();
        importDB_MenuItem = new javax.swing.JMenuItem();
        close_menuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        UserManual = new javax.swing.JRadioButtonMenuItem();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Malla Computers");

        table_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Form"));

        jLabel1.setText("Device ID :");

        jLabel2.setText("Device name :");

        jLabel3.setText("Category :");

        jLabel4.setText("Range level :");

        jLabel5.setText("Price :");

        add_Btn.setBackground(new java.awt.Color(0, 102, 204));
        add_Btn.setForeground(new java.awt.Color(0, 0, 0));
        add_Btn.setText("Add Item");
        add_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_BtnActionPerformed(evt);
            }
        });

        clear_Btn.setBackground(new java.awt.Color(0, 102, 204));
        clear_Btn.setText("Clear");
        clear_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_BtnActionPerformed(evt);
            }
        });

        delete_Btn.setBackground(new java.awt.Color(0, 102, 204));
        delete_Btn.setText("Delete");
        delete_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_BtnActionPerformed(evt);
            }
        });

        id_TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                id_TFActionPerformed(evt);
            }
        });
        id_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                id_TFKeyTyped(evt);
            }
        });

        price_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                price_TFKeyTyped(evt);
            }
        });

        range_BtnGrp.add(Mid_RangeBtn);
        Mid_RangeBtn.setText("Mid");
        Mid_RangeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Mid_RangeBtnActionPerformed(evt);
            }
        });

        range_BtnGrp.add(High_rangeBtn);
        High_rangeBtn.setText("High");
        High_rangeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                High_rangeBtnActionPerformed(evt);
            }
        });

        range_BtnGrp.add(Budget_rangeBTN);
        Budget_rangeBTN.setText("Budget");
        Budget_rangeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Budget_rangeBTNActionPerformed(evt);
            }
        });

        category_CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gaming", "Home use", "Business", "High performance", "Customized" }));
        category_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                category_CBActionPerformed(evt);
            }
        });

        exit_Btn.setBackground(new java.awt.Color(0, 102, 204));
        exit_Btn.setText("Exit");
        exit_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_BtnActionPerformed(evt);
            }
        });

        jLabel8.setText("Type :");

        type_CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Desktop", "Laptop", "Convertible" }));

        javax.swing.GroupLayout table_PanelLayout = new javax.swing.GroupLayout(table_Panel);
        table_Panel.setLayout(table_PanelLayout);
        table_PanelLayout.setHorizontalGroup(
            table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, table_PanelLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(table_PanelLayout.createSequentialGroup()
                        .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel8)
                            .addComponent(jLabel5))
                        .addGap(67, 67, 67)
                        .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(price_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(type_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(table_PanelLayout.createSequentialGroup()
                                    .addComponent(Budget_rangeBTN)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(High_rangeBtn))
                                .addComponent(id_TF)
                                .addComponent(name_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Mid_RangeBtn)
                                .addComponent(category_CB, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(table_PanelLayout.createSequentialGroup()
                        .addComponent(add_Btn)
                        .addGap(30, 30, 30)
                        .addComponent(clear_Btn)
                        .addGap(30, 30, 30)
                        .addComponent(delete_Btn)
                        .addGap(30, 30, 30)
                        .addComponent(exit_Btn)))
                .addGap(58, 58, 58))
        );
        table_PanelLayout.setVerticalGroup(
            table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(table_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(id_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(name_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(category_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(Mid_RangeBtn)
                    .addComponent(High_rangeBtn)
                    .addComponent(Budget_rangeBTN))
                .addGap(45, 45, 45)
                .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(type_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(price_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(table_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add_Btn)
                    .addComponent(clear_Btn)
                    .addComponent(delete_Btn)
                    .addComponent(exit_Btn))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Personal Computer Information System", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 16))); // NOI18N

        computerIS_Tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Category", "Range level", "Type", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(computerIS_Tbl);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Search"));

        priceSrch_TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSrch_TFActionPerformed(evt);
            }
        });
        priceSrch_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceSrch_TFKeyTyped(evt);
            }
        });

        jLabel6.setText("Device Price :");

        priceSrch_Btn.setBackground(new java.awt.Color(0, 102, 204));
        priceSrch_Btn.setText("Search device");
        priceSrch_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSrch_BtnActionPerformed(evt);
            }
        });

        jLabel7.setText("Device category :");

        categorySearch_CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "(Optional)", "Gaming", "Home use", "Business", "High performance", "Customized" }));
        categorySearch_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categorySearch_CBActionPerformed(evt);
            }
        });

        SortList_Btn.setBackground(new java.awt.Color(0, 102, 204));
        SortList_Btn.setText("Sort List");
        SortList_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortList_BtnActionPerformed(evt);
            }
        });

        totalCategorySrch_CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gaming", "Home use", "Business", "High performance", "Customized" }));
        totalCategorySrch_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalCategorySrch_CBActionPerformed(evt);
            }
        });

        jLabel9.setText("Find total devices in a category");

        totalDevice.setBackground(new java.awt.Color(0, 102, 204));
        totalDevice.setText("Find");
        totalDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalDeviceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(priceSrch_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(SortList_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(categorySearch_CB, 0, 177, Short.MAX_VALUE)
                            .addComponent(priceSrch_TF))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(177, 177, 177)
                                .addComponent(jLabel9)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(totalCategorySrch_CB, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(priceSrch_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(categorySearch_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalCategorySrch_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priceSrch_Btn)
                            .addComponent(totalDevice))
                        .addGap(26, 26, 26))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SortList_Btn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jMenu1.setText("File");

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFile.setSelected(true);
        openFile.setText("Open");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        jMenu1.add(openFile);

        importDB_MenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        importDB_MenuItem.setText("Import Database file");
        importDB_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDB_MenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(importDB_MenuItem);

        close_menuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, java.awt.event.InputEvent.CTRL_MASK));
        close_menuItem.setText("Close");
        close_menuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_menuItemActionPerformed(evt);
            }
        });
        jMenu1.add(close_menuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        UserManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        UserManual.setSelected(true);
        UserManual.setText("Open Manual");
        UserManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserManualActionPerformed(evt);
            }
        });
        jMenu2.add(UserManual);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(table_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(table_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void id_TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_id_TFActionPerformed
        
    }//GEN-LAST:event_id_TFActionPerformed

    private void Mid_RangeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Mid_RangeBtnActionPerformed
        // TODO add your handling code here:
        range = "Mid";
    }//GEN-LAST:event_Mid_RangeBtnActionPerformed

    private void High_rangeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_High_rangeBtnActionPerformed
        // TODO add your handling code here:
        range = "High";
    }//GEN-LAST:event_High_rangeBtnActionPerformed

    private void Budget_rangeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Budget_rangeBTNActionPerformed
        // TODO add your handling code here:
        range = "Budget";
    }//GEN-LAST:event_Budget_rangeBTNActionPerformed

    private void exit_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_BtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exit_BtnActionPerformed

    private void priceSrch_TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSrch_TFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceSrch_TFActionPerformed

    private void add_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_BtnActionPerformed
        String deviceID = id_TF.getText().trim();
        String deviceName = name_TF.getText().trim();
        String devicePrice = price_TF.getText().trim();
        String deviceCategory = category_CB.getSelectedItem().toString();
        String deviceType = type_CB.getSelectedItem().toString();
        validation(deviceID, deviceName, devicePrice, deviceCategory, deviceType);
        loadToCSV();
    }//GEN-LAST:event_add_BtnActionPerformed

    private void priceSrch_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSrch_BtnActionPerformed
        String searchValue = priceSrch_TF.getText().trim();
        String searchCategory = categorySearch_CB.getSelectedItem().toString();
        search_device(searchValue, searchCategory);
    }//GEN-LAST:event_priceSrch_BtnActionPerformed

    private void id_TFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_id_TFKeyTyped
    }//GEN-LAST:event_id_TFKeyTyped

    private void price_TFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_price_TFKeyTyped
        char key = evt.getKeyChar();
        if(!(key >= '0' && key <= '9')){
            evt.consume();
        }
    }//GEN-LAST:event_price_TFKeyTyped

    private void priceSrch_TFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceSrch_TFKeyTyped
        char key = evt.getKeyChar();
        if(!(key >= '0' && key <= '9')){
            evt.consume();
        }
    }//GEN-LAST:event_priceSrch_TFKeyTyped

    private void clear_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_BtnActionPerformed
        clearTextFields();
    }//GEN-LAST:event_clear_BtnActionPerformed

    private void delete_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_BtnActionPerformed
        deleteDevice();
    }//GEN-LAST:event_delete_BtnActionPerformed
    
    private void SortList_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortList_BtnActionPerformed
        // TODO add your handling code here:
        sort_ArrayListObject();
        updateTable();
    }//GEN-LAST:event_SortList_BtnActionPerformed

    private void close_menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_menuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_close_menuItemActionPerformed

    private void importDB_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importDB_MenuItemActionPerformed
        importFromCSV();
    }//GEN-LAST:event_importDB_MenuItemActionPerformed

    private void category_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_category_CBActionPerformed
    }//GEN-LAST:event_category_CBActionPerformed

    private void categorySearch_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categorySearch_CBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categorySearch_CBActionPerformed

    private void totalCategorySrch_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalCategorySrch_CBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalCategorySrch_CBActionPerformed

    private void totalDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalDeviceActionPerformed
        totalItemInCategory();
    }//GEN-LAST:event_totalDeviceActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        // TODO add your handling code here:
        try{
            String path = System.getProperty("user.dir");
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler "+path+"\\rights_reserved.pdf");
        }catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "not found", "error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void UserManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserManualActionPerformed
        try{
            String path = System.getProperty("user.dir");
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler "+path+"\\usermanual.pdf");
        }catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "not found", "error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_UserManualActionPerformed
    public void deleteDevice(){
        try{
            DefaultTableModel model = (DefaultTableModel) computerIS_Tbl.getModel();
            
            int deletionRow = computerIS_Tbl.getSelectedRow();
            String checkElement = computerIS_Tbl.getValueAt((deletionRow), 1).toString();
            if(deletionRow == -1){
                JOptionPane.showMessageDialog(rootPane,"Please select a row to delete","Error",JOptionPane.ERROR_MESSAGE);
            }else if(checkElement.equals("")){
                JOptionPane.showMessageDialog(rootPane,"An Empty row is selected","Error",JOptionPane.ERROR_MESSAGE);
            }else{
                list.remove(deletionRow);
                updateTable();
                loadToCSV();
            }
        }catch(NullPointerException no){
            JOptionPane.showMessageDialog(rootPane,"An Empty row is selected","Error",JOptionPane.ERROR_MESSAGE);
        }catch(ArrayIndexOutOfBoundsException aex){
            JOptionPane.showMessageDialog(rootPane,"Please select a row to delete","Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    public void validation(String deviceID, String deviceName, String devicePrice,String deviceCategory, String deviceType){
        String [] table_Values = {deviceID, deviceName,deviceCategory,range,deviceType, devicePrice};
        if (deviceID.equals("") || deviceName.equals("") || devicePrice.equals("") ){
            JOptionPane.showMessageDialog(rootPane,"Fill the Form to add new device","Empty Form", JOptionPane.ERROR_MESSAGE);
        }else if(range_BtnGrp.getSelection()==null){
            JOptionPane.showMessageDialog(rootPane,"Select Device Range Level","Select Range", JOptionPane.ERROR_MESSAGE);
        }else{
            int nextRow = 0;
            boolean emptyRowCheck = false;
            int rowCount = computerIS_Tbl.getRowCount();
            int colCount = computerIS_Tbl.getColumnCount();
            String s;
            while (nextRow<rowCount && emptyRowCheck==false){
                s = (String)computerIS_Tbl.getValueAt(nextRow, 0);
                if(s!=null && s.length()!=0){
                    nextRow++;
                }else{                        
                    emptyRowCheck= true;
                }

            }if(!Pattern.compile("[L]....").matcher(deviceID).matches()){ 
                JOptionPane.showMessageDialog(rootPane,"Invalid device ID","Invalid", JOptionPane.ERROR_MESSAGE);
            }else{
                for(TableRows tr: list){
                    if(deviceID.equals(tr.getID())){
                        JOptionPane.showMessageDialog(rootPane,"The device ID has been repeated,\nPlease insert new ID","Device ID", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }if(Budget_rangeBTN.isSelected()){
                    if(Integer.parseInt(devicePrice)>=10 && Integer.parseInt(devicePrice)<=1099){                        
                        add_to_table_arraylist(nextRow, rowCount, table_Values, colCount, computerIS_Tbl,deviceID, deviceName,deviceCategory, range, deviceType, devicePrice);
                    }else{
                        JOptionPane.showMessageDialog(rootPane,"The Range for budget range device is in between $10-1099","Price Range Error", JOptionPane.ERROR_MESSAGE);
                    }
                }else if(Mid_RangeBtn.isSelected()){
                    if(Integer.parseInt(devicePrice)>=1100 && Integer.parseInt(devicePrice)<=1999){
                        add_to_table_arraylist(nextRow, rowCount, table_Values, colCount, computerIS_Tbl,deviceID, deviceName,deviceCategory, range, deviceType, devicePrice);
                    }else{
                        JOptionPane.showMessageDialog(rootPane,"The Range for Mid range is in between $1100-1999","Price Range Error", JOptionPane.ERROR_MESSAGE);
                    }
                }else if(High_rangeBtn.isSelected()){
                    if(Integer.parseInt(devicePrice)>=2000 && Integer.parseInt(devicePrice)<=12000){
                        add_to_table_arraylist(nextRow, rowCount, table_Values, colCount, computerIS_Tbl,deviceID, deviceName,deviceCategory, range, deviceType, devicePrice);
                    }else{
                        JOptionPane.showMessageDialog(rootPane,"The Range for High range is in between 2000-12000","Price Range Error", JOptionPane.ERROR_MESSAGE);
                    }
                }

            }
        }
    }
    public void add_to_table_arraylist(int nextRow, int rowCount, String [] val , int colcount, JTable abc, String ID, String DN, String DC,String rg, String DT, String DP){
        if(nextRow<rowCount){
                for(int j = 0; j<colcount ; j++){
                    abc.setValueAt(val[j],nextRow,j);
                }
                list.add(new TableRows(ID, DN, DC, rg, DT, DP));
            }else{
                JOptionPane.showMessageDialog(rootPane,"Table Filled","Table Filled", JOptionPane.ERROR_MESSAGE);
            }      
    }
    public void clearTextFields(){
        id_TF.setText("");
        name_TF.setText("");
        price_TF.setText("");
        category_CB.setSelectedIndex(0);
        type_CB.setSelectedIndex(0);
        categorySearch_CB.setSelectedIndex(0);
        priceSrch_TF.setText("");
        range_BtnGrp.clearSelection();
    }
    public void sort_ArrayListObject(){
        for (int i = 0; i < list.size() - 1; i++){ 
            int minPos = i;
            for(int j = i+1; j < list.size(); j++){ 
                if(list.get(j).getPrice()<list.get(minPos).getPrice()){
                    minPos = j; 
             }
         }
            Collections.swap(list, minPos, i);
        }
        loadToCSV();
    }
    
    public void updateTable(){
	DefaultTableModel mod = (DefaultTableModel)computerIS_Tbl.getModel();
	mod.setRowCount(0);
        mod.setRowCount(26);
	for(TableRows tr: list){
            String device[] = {tr.getID(), tr.getName(), tr.getCategory() , tr.getRange_Level() , tr.getType() , Integer.toString(tr.getPrice())};
            int nextRow = 0;
            boolean emptyRowCheck = false;
            int rowCount = computerIS_Tbl.getRowCount();
            int colCount = computerIS_Tbl.getColumnCount();
            String s;
            while (nextRow<rowCount && emptyRowCheck==false){
                s = (String)computerIS_Tbl.getValueAt(nextRow, 0);
                if(s!=null && s.length()!=0){
                    nextRow++;
                }else{                        
                    emptyRowCheck= true;
                }
            }
            if(nextRow<rowCount){
                for(int j = 0; j<colCount ; j++){
                    computerIS_Tbl.setValueAt(device[j],nextRow,j);
                }
            }
        }
    }
    public void search_device(String searchValue1, String searchCategory){
        sort_ArrayListObject();
        if(searchValue1.equals("")){
            JOptionPane.showMessageDialog(rootPane,"Enter Price Value to search","Input error", JOptionPane.ERROR_MESSAGE);
        }else{  
            int search_Value = Integer.parseInt(searchValue1);
            if(searchCategory == "(Optional)"){
                int index = binary_Search(list, 0, list.size()-1, search_Value);
                if(index == -1){
                    JOptionPane.showMessageDialog(rootPane,"Sorry, no items found according to your preference.","Not Found", JOptionPane.INFORMATION_MESSAGE);
                }else{
                    String deviceID = list.get(index).getID();
                    String deviceName = list.get(index).getName();
                    String deviceCategory = list.get(index).getCategory();
                    String deviceRange = list.get(index).getRange_Level();
                    String deviceType = list.get(index).getType();
                int devicePrice = list.get(index).getPrice();
                    JOptionPane.showMessageDialog(rootPane,"The Device of your choice\nDevice ID: "+deviceID+
                            "\nDevice Name: "+deviceName+
                            "\nDevice Category: "+deviceCategory+
                            "\nDevice Range: "+deviceRange+
                            "\nDevice Type: "+deviceType+
                            "\nDevice Price: $"+devicePrice,
                            "Device Info", JOptionPane.INFORMATION_MESSAGE); }
            }else{
                ArrayList<TableRows> categoryList = new ArrayList();
                for(TableRows s: list){
                    if(s.getCategory().equals(searchCategory)){
                        categoryList.add(s);
                    }
                }
                int index = binary_Search(categoryList, 0, categoryList.size()-1, search_Value);                
                if(index == -1){
                    JOptionPane.showMessageDialog(rootPane,"Sorry, no items found according to your preference.","Not Found", JOptionPane.INFORMATION_MESSAGE);
                }else{
                    String deviceID = categoryList.get(index).getID();
                    String deviceName = categoryList.get(index).getName();
                    String deviceCategory = categoryList.get(index).getCategory();
                    String deviceRange = categoryList.get(index).getRange_Level();
                    String deviceType = categoryList.get(index).getType();
                int devicePrice = categoryList.get(index).getPrice();
                    JOptionPane.showMessageDialog(rootPane,"The Device of your choice\nDevice ID: "+deviceID+
                            "\nDevice Name: "+deviceName+
                            "\nDevice Category: "+deviceCategory+
                            "\nDevice Range: "+deviceRange+
                            "\nDevice Type: "+deviceType+
                            "\nDevice Price: $"+devicePrice,
                            "Device Info", JOptionPane.INFORMATION_MESSAGE); }}}}
        

    public int binary_Search(ArrayList <TableRows> anylist, int low, int high, int searchValue ){
        if(low<=high){
            int mid = (low+high)/2;
            if(anylist.get(mid).getPrice()==searchValue){
                return mid;
            } else if(anylist.get(mid).getPrice()>searchValue){
                return binary_Search(anylist,low,mid-1,searchValue); 
            }else{             
                return binary_Search(anylist,mid+1,high, searchValue); 
            }
        }else{
            return -1;
        }
    }
    
    public void loadToCSV(){
        try{
            File CSVfile = new File("MallaComputers_database.CSV");
            if(!CSVfile.isFile()){
                CSVfile.createNewFile();
            }
            FileWriter fw = new FileWriter(CSVfile);
            for(TableRows tr: list){
                String device[] = {tr.getID(), tr.getName(), tr.getCategory() , tr.getRange_Level() , tr.getType() , Integer.toString(tr.getPrice())};
                for(int i=0; i<device.length; i++){
                fw.append(device[i]);
                    if(i == device.length-1){
                        break;
                    }
                    fw.append(",");
                }
                fw.append("\n");
            }
            fw.flush();
            fw.close();
        }catch (IOException ioex){
        
        }
    }
    
    public void importFromCSV(){
        try{            
            list.clear();
            DefaultTableModel mod = (DefaultTableModel)computerIS_Tbl.getModel();
            mod.setRowCount(0);
            mod.setRowCount(26);
            BufferedReader br = new BufferedReader(new FileReader("MallaComputers_database.CSV"));
            String one_device = "";
            while((one_device = br.readLine()) != null){
                String []device = one_device.split(",");

                int nextRow = 0;
                boolean emptyRowCheck = false;
                int rowCount = computerIS_Tbl.getRowCount();
                int colCount = computerIS_Tbl.getColumnCount();
                String s;
                while (nextRow<rowCount && emptyRowCheck==false){
                    s = (String)computerIS_Tbl.getValueAt(nextRow, 0);
                    if(s!=null && s.length()!=0){
                        nextRow++;
                    }else{                        
                        emptyRowCheck= true;
                    }
                }
                if(nextRow<rowCount){
                    for(int j = 0; j<colCount ; j++){
                        computerIS_Tbl.setValueAt(device[j],nextRow,j);
                    }
                    String devID = device[0];
                    String devName = device[1];
                    String devCat = device[2];
                    String devRange = device[3];
                    String devType = device[4];
                    String devPrice = device[5];               
                    list.add(new TableRows(devID, devName, devCat, devRange, devType, devPrice));
                }
            
        }       
        }catch(FileNotFoundException fe){
            JOptionPane.showMessageDialog(rootPane,"No files found to open","File Not Found", JOptionPane.INFORMATION_MESSAGE);
        }catch(IOException ioe){
        
        }
    }
    
    public void totalItemInCategory(){
    sort_ArrayListObject();
        String [] categories = new String[list.size()];
        for(int j = 0; j<list.size(); j++){
            categories[j] = list.get(j).getCategory();
        }
        int categoryFound = 0;
        String searchCategory = totalCategorySrch_CB.getSelectedItem().toString();
        for(int i = 0; i<categories.length;i++){
            if(categories[i].equals(searchCategory)){
                categoryFound++;
            }
        }            
        JOptionPane.showMessageDialog(rootPane,"Total number of device in "+searchCategory+ " category: "+categoryFound,searchCategory+" device information",JOptionPane.INFORMATION_MESSAGE);
       }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppliancesInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Budget_rangeBTN;
    private javax.swing.JRadioButton High_rangeBtn;
    private javax.swing.JRadioButton Mid_RangeBtn;
    private javax.swing.JButton SortList_Btn;
    private javax.swing.JRadioButtonMenuItem UserManual;
    private javax.swing.JButton add_Btn;
    private javax.swing.JComboBox<String> categorySearch_CB;
    private javax.swing.JComboBox<String> category_CB;
    private javax.swing.JButton clear_Btn;
    private javax.swing.JMenuItem close_menuItem;
    private javax.swing.JTable computerIS_Tbl;
    private javax.swing.JButton delete_Btn;
    private javax.swing.JButton exit_Btn;
    private javax.swing.JTextField id_TF;
    private javax.swing.JMenuItem importDB_MenuItem;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField name_TF;
    private javax.swing.JRadioButtonMenuItem openFile;
    private javax.swing.JButton priceSrch_Btn;
    private javax.swing.JTextField priceSrch_TF;
    private javax.swing.JTextField price_TF;
    private javax.swing.ButtonGroup range_BtnGrp;
    private javax.swing.JPanel table_Panel;
    private javax.swing.JComboBox<String> totalCategorySrch_CB;
    private javax.swing.JButton totalDevice;
    private javax.swing.JComboBox<String> type_CB;
    // End of variables declaration//GEN-END:variables
}
